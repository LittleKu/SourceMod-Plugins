/* Plugin Template generated by Pawn Studio */

#include <sourcemod>
#include <sdktools>

new Handle:ghGameConf = INVALID_HANDLE;
new Handle:ghGetEyePosition = INVALID_HANDLE;
new Handle:ghGetWeaponPosition = INVALID_HANDLE;
new giLaserbeam = 0;

public OnMapStart()
{
	giLaserbeam = PrecacheModel("materials/sprites/laserbeam.vmt");
}

public Plugin:myinfo = 
{
	name = "CS:GO 死亡射线",
	author = "L.K",
	description = "当玩家被阵亡时,会在被杀者与杀敌者之间创建一条射线",
	version = "1.0",
	url = "http://www.cnblogs.com/littleku"
}

public OnPluginStart()
{
	/* Add your fucking own code here...
	 * and start fucking the code now...
	 * good luck for you bitch
	 */
	
	ghGameConf = LoadGameConfigFile("death_beam.games");
	if (ghGameConf == INVALID_HANDLE)
	{
		SetFailState("Couldn't load game config file \"%s\"", "gamedata/death_beam.games.txt");
	}
	
	StartPrepSDKCall(SDKCall_Player);
	PrepSDKCall_SetFromConf(ghGameConf, SDKConf_Virtual, "EyePosition");
	PrepSDKCall_SetReturnInfo(SDKType_Vector, SDKPass_ByValue);
	ghGetEyePosition = EndPrepSDKCall();
	
	StartPrepSDKCall(SDKCall_Player);
	PrepSDKCall_SetFromConf(ghGameConf, SDKConf_Virtual, "Weapon_ShootPosition");
	PrepSDKCall_SetReturnInfo(SDKType_Vector, SDKPass_ByValue);
	ghGetWeaponPosition = EndPrepSDKCall();
	
	HookEvent("player_death", Event_PlayerDeath);
}

public Event_PlayerDeath(Handle:event, const String:name[], bool:dontBroadcast)
{
	new victim = GetClientOfUserId(GetEventInt(event, "userid"));
	new killer = GetClientOfUserId(GetEventInt(event, "attacker"));
	new Float:vOrigin[3];
	new Float:kOrigin[3];
	new Float:vOri1[3], Float:vOri2[3], Float:vOri3[3], Float:vOri4[3], Float:vOri5[3], Float:vOri6[3];
	new Float:kOri1[3], Float:kOri2[3], Float:kOri3[3], Float:kOri4[3], Float:kOri5[3], Float:kOri6[3];
	
	if (victim && killer && (killer != victim) && GetClientTeam(victim) != GetClientTeam(killer))
	{
		SDKCall(ghGetWeaponPosition, killer, kOrigin);
		SDKCall(ghGetEyePosition, victim, vOrigin);
		
		TE_SetupBeamPoints(vOrigin, kOrigin, giLaserbeam, 0, 0, 0, 10.0, 2.0, 2.0, 20, 0.0, {200, 50, 200, 200}, 0);
		TE_SendToClient(victim);
		
		vOri1[0] = vOrigin[0] + 30;
		vOri1[1] = vOrigin[1];
		vOri1[2] = vOrigin[2];
		
		vOri2[0] = vOrigin[0] - 30;
		vOri2[1] = vOrigin[1];
		vOri2[2] = vOrigin[2];
		
		TE_SetupBeamPoints(vOri1, vOri2, giLaserbeam, 0, 0, 0, 10.0, 2.0, 2.0, 20, 0.0, {255, 50, 50, 100}, 0);
		TE_SendToClient(victim);
		
		vOri3[0] = vOrigin[0];
		vOri3[1] = vOrigin[1] + 30;
		vOri3[2] = vOrigin[2];
		
		vOri4[0] = vOrigin[0];
		vOri4[1] = vOrigin[1] - 30;
		vOri4[2] = vOrigin[2];
		
		TE_SetupBeamPoints(vOri3, vOri4, giLaserbeam, 0, 0, 0, 10.0, 2.0, 2.0, 20, 0.0, {255, 50, 50, 100}, 0);
		TE_SendToClient(victim);
		
		vOri5[0] = vOrigin[0];
		vOri5[1] = vOrigin[1];
		vOri5[2] = vOrigin[2] + 30;
		
		vOri6[0] = vOrigin[0];
		vOri6[1] = vOrigin[1];
		vOri6[2] = vOrigin[2] - 30;
		
		TE_SetupBeamPoints(vOri5, vOri6, giLaserbeam, 0, 0, 0, 10.0, 2.0, 2.0, 20, 0.0, {255, 50, 50, 100}, 0);
		TE_SendToClient(victim);
		
		
		kOri1[0] = kOrigin[0] + 30;
		kOri1[1] = kOrigin[1];
		kOri1[2] = kOrigin[2];
		
		kOri2[0] = kOrigin[0] - 30;
		kOri2[1] = kOrigin[1];
		kOri2[2] = kOrigin[2];
		
		TE_SetupBeamPoints(kOri1, kOri2, giLaserbeam, 0, 0, 0, 10.0, 2.0, 2.0, 20, 0.0, {50, 50, 255, 100}, 0);
		TE_SendToClient(victim);
		
		kOri3[0] = kOrigin[0];
		kOri3[1] = kOrigin[1] + 30;
		kOri3[2] = kOrigin[2];
		
		kOri4[0] = kOrigin[0];
		kOri4[1] = kOrigin[1] - 30;
		kOri4[2] = kOrigin[2];
		
		TE_SetupBeamPoints(kOri3, kOri4, giLaserbeam, 0, 0, 0, 10.0, 2.0, 2.0, 20, 0.0, {50, 50, 255, 100}, 0);
		TE_SendToClient(victim);
		
		kOri5[0] = kOrigin[0];
		kOri5[1] = kOrigin[1];
		kOri5[2] = kOrigin[2] + 30;
		
		kOri6[0] = kOrigin[0];
		kOri6[1] = kOrigin[1];
		kOri6[2] = kOrigin[2] - 30;
		
		TE_SetupBeamPoints(kOri5, kOri6, giLaserbeam, 0, 0, 0, 10.0, 2.0, 2.0, 20, 0.0, {50, 50, 255, 100}, 0);
		TE_SendToClient(victim);
	}
}
